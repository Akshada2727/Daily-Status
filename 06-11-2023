//html

<div class="container">
    <div class="row">
      <div class="col-sm-12 mb-3">
        <input type="text" [(ngModel)]="filterText" class="form-control" placeholder="Search for names.." (input)="filteredCards">
      </div>
      <div class="col-sm-12 mb-3">
        <input type="text" [(ngModel)]="categoryFilter" class="form-control" placeholder="Search for category.." (input)="filteredCards">
      </div>
      <div class="col-sm-12 mb-3">
        <input type="text" [(ngModel)]="authorFilter" class="form-control" placeholder="Search for Author.." (input)="filteredCards">
      </div>
    </div>
    <div class="row" id="myItems">
      <div class="col-sm-12">
        <div class="card-deck horizontal-cards"> <!-- Add a custom class 'horizontal-cards' -->
          <div class="card" *ngFor="let card of filteredCards">
            <div class="card-body">
              <small>
                  <p class="card-title"><a href="#">{{ card.title }}</a></p>
              </small>
              <div class="card-content">
                  <img class="card-image" [src]="card.image" alt="{{ card.title }} Image">
                  <div class="card-text-wrapper">
                      <p class="card-text">{{ card.text }}</p>
                      <a [routerLink]="['/layout/subscribe', card.title]" class="card-link" style="font-size: 20px;">Subscribe now</a>
                      <a [routerLink]="['/layout/preview', card.title]" class="card-link" style="font-size: 20px;">Preview</a>
                  </div>
              </div>
          </div>
          
          </div>
        </div>
      </div>
    </div>
  </div>
  .container {
  position: relative;
}


//css
.row {
  position: sticky;
  top: 0;
  z-index: 100; /* Ensure it's above the card content */
  background-color: #fff; /* Add a background color if needed */
  padding-bottom: 30px; /* Add padding to space out the filters */
  display: flex;
  justify-content: space-around;
}

/* Adjust the margin-top for the card content to avoid overlap with filters */
#myItems {
  margin-top: 50px; /* Adjust this value as needed */
}

.horizontal-cards {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  /* Adjust the gap between cards as needed */
  gap: 15px; /* Example gap of 15px between cards */
}

.card {
  flex: 0 0 calc(33.33% - 20px); /* Adjust card width based on the number of columns and gap */
  margin: auto;
  border: 1px solid #ccc;
  background-color: #001a33;
  transition: transform 0.2s;
  border-radius: 10%;
  color: azure;
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
  overflow: hidden; /* Ensure contents don't overflow the card */
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.card-title a {
  text-decoration: none;
  color: white;
}

.card-title a:hover {
  text-decoration: underline;
}

.card-content {
  display: flex;
  align-items: flex-start;
  flex-grow: 1;
  margin-top: 10px;
  width: 100%; /* Ensure content takes full width */
  padding: 10px; /* Add padding to create space between image and text */
}

.card-image {
  max-width: 100px; /* Adjust the size of the image */
  height: auto;
  margin-right: 10px; /* Add margin to create space between image and text */
}

.card-text-wrapper {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.card-text {
  text-align: center;
  font-size: 16px; /* Adjust text size as needed */
  margin-bottom: 10px; /* Add margin to separate text from links */
}

.card-link {
  font-size: 20px;
  text-align: center;
}
//ts
import { Component } from '@angular/core';
import { BookSubscriptionService } from '../book-subscription.service';
import { Inject } from '@angular/core';

@Component({
  selector: 'app-surf',
  templateUrl: './surf.component.html',
  styleUrls: ['./surf.component.css']
})
export class SurfComponent {

  constructor(@Inject(BookSubscriptionService) private bookSubscriptionService: BookSubscriptionService) {}

subscribeToBook(book: any) {
  this.bookSubscriptionService.addSubscribedBook(book);
}
  filterText = '';
  categoryFilter='';
  authorFilter='';
  cards = [
    // { title: 'Card One', text: 'Some text.',image:'/assets/img1.jpg' },
    { title: 'Harry Potter & the half blood prince', image:'/assets/img1.jpg',text:'Author: J. K Rowling  Category: Novel',link:'Subscribe now',link2:'Preview'
  },
    { title: 'Love Story', image:'/assets/img2.jpg',text: 'Author: karen kingsbury  Category: Romance' ,link:'Subscribe now',link2:'Preview' },
    { title: 'The Skittering and other tales',image:'/assets/img3.jpg', text: 'Author: Tony Tucker  Category: Horror',link:'Subscribe now',link2:'Preview'},
    { title: 'Treasure Island',image:'/assets/img4.jpg', text: 'Author: Robert Stevenson Category: Adventure' ,link:'Subscribe now',link2:'Preview'},
    { title: 'Harry Potter & the prisoners of Azkaban',image:'/assets/Picture1.jpg',text:'Author: J. K Rowling  Category: Novel',link:'Subscribe now' ,link2:'Preview'},
    { title: 'Harry Potter & the deathly hallows part 1', image:'/assets/Picture1.jpg',text:'Author: J. K Rowling  Category: Novel',link:'Subscribe now',link2:'Preview' },
    // { title: 'Card seven', text: 'Some text.' },
    // { title: 'Card eight', text: 'Some text.' }
    // Add more card objects here
  ];

  // get filteredCards() {
  //   return this.cards.filter(card =>
  //     card.title.toLowerCase().includes(this.filterText.toLowerCase())&&
  //     card.text.toLowerCase().includes(this.authorFilter.toLowerCase())&&
  //     card.text.toLowerCase().includes(this.categoryFilter.toLowerCase())
  //   );

    
  // }
  get filteredCards() {
    const filtered = this.cards.filter(card =>
      card.title.toLowerCase().includes(this.filterText.toLowerCase()) &&
      card.text.toLowerCase().includes(this.authorFilter.toLowerCase()) &&
      card.text.toLowerCase().includes(this.categoryFilter.toLowerCase())
    );

    
    if (filtered.length === 0) {
     return [{ title: 'Book not found', image: '', text: '',link:''}];
     
    }

    return filtered;
  }
}

